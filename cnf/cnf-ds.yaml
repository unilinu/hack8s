apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    meta.helm.sh/release-name: fleetboard-agent
    meta.helm.sh/release-namespace: default
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cnf-fleetboard
  namespace: fleetboard-system
spec:
  selector:
    matchLabels:
      app: cnf-fleetboard
  template:
    metadata:
      labels:
        app: cnf-fleetboard
        ssh-app: cnf
        router.fleetboard.io/cnf: "true"
    spec:
      containers:
        - command:
            - /ep-controller
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: PARALLEL_IP_ANNOTATION
              value: router.fleetboard.io/dedicated_ip
          image: ghcr.io/fleetboard-io/controller:latest
          imagePullPolicy: Always
          name: controller
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
            - /proxy/proxy
            - --config=/var/lib/kube-proxy/config.conf
            - --hostname-override=$(NODE_NAME)
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          image: ghcr.io/fleetboard-io/proxy:latest
          imagePullPolicy: Always
          name: proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/kube-proxy
              name: cnf-proxy
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
        - image: ubuntu:22.04
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "-c"]
          args:
          - |
            # set env
            printenv >> /etc/environment
            # install golang
            apt-get update && apt-get install -y curl tar
            GO_VERSION=1.23.0 && GO_ARCH=arm64
            curl -LO https://golang.org/dl/go$GO_VERSION.linux-$GO_ARCH.tar.gz && tar -C /usr/local -xzf go$GO_VERSION.linux-$GO_ARCH.tar.gz
            ln -s /usr/local/go/bin/go /usr/local/bin/go
            # start sshd
            apt-get install -y openssh-server && service ssh start && tail -f /dev/null
          ports:
            - containerPort: 22 # 默认的 SSH 服务端口
          volumeMounts:
            - mountPath: /var/run/netns
              mountPropagation: Bidirectional
              name: host-ns
            - mountPath: /var/run/nri
              mountPropagation: HostToContainer
              name: host-nri
            - name: golang-volume
              mountPath: /usr/loal/bin
            - name: ssh-volume
              mountPath: /root/.ssh
          env:
            - name: FLEETBOARD_CLUSTERID
              value: cluster1
            - name: FLEETBOARD_BOOTSTRAPTOKEN
              value: re51os.131tn13kek2iaqoz
            - name: FLEETBOARD_PODNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: FLEETBOARD_PODNAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: FLEETBOARD_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          name: cnf
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: true
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: fleetboard
      serviceAccountName: fleetboard
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
        - name: golang-volume
          hostPath:
            path: /usr/local/bin/go
        - name: ssh-volume
          hostPath:
            path: /root/.ssh
            type: Directory
        - hostPath:
            path: /var/run/netns
            type: ""
          name: host-ns
        - hostPath:
            path: /var/run/nri
            type: DirectoryOrCreate
          name: host-nri
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: cnf-proxy
          name: cnf-proxy
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
